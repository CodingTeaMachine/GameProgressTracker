// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User related things

model User {
    id String @id @unique

    username String @unique
    email    String @unique

    auth_session Session[]
    key          Key[]
}

model Session {
    id             String @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
}

model Key {
    id              String  @id @unique
    hashed_password String?
    user_id         String
    user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
}

// Game related things
// TODO: If you add soft deletes to a table, you need to also add them to the list of softdelete models in prisma.ts

model Game {
    id           Int       @id @unique @default(autoincrement())
    title        String
    description  String
	cover String?
    is_dlc       Boolean   @default(false)
    release_date DateTime? @db.Date

	deleted Boolean @default(false)
    deleted_at DateTime?

    parent_id Int?
    Parent    Game?  @relation("GameDLC", fields: [parent_id], references: [id])
	DLCs Game[] @relation("GameDLC")

    franchise_id Int?
    Franchise    Franchise? @relation(fields: [franchise_id], references: [id])

    Genres      Genre[]
    Publishers  Publisher[]
    Developers  Developer[]
    Platforms   Platform[]
    Storefronts Storefront[]

	Areas            Area[]
    Achievements Achievement[]
    Collectibles Collectible[]
	CollectibleTypes CollectibleType[]
}

model Franchise {
    id    Int    @id @unique @default(autoincrement())
    title String @unique

    deleted    Boolean   @default(false)
    deleted_at DateTime?

    Games Game[]
}

model Genre {
    id    Int    @id @unique @default(autoincrement())
    label String @unique

	deleted Boolean @default(false)
    deleted_at DateTime?

    Games Game[]
}

model Publisher {
    id    Int    @id @unique @default(autoincrement())
    label String @unique

	deleted Boolean @default(false)
    deleted_at DateTime?

    Games Game[]
}

model Developer {
    id    Int    @id @unique @default(autoincrement())
    label String @unique

	deleted Boolean @default(false)
    deleted_at DateTime?

    Games Game[]
}

model Platform {
    id   Int    @id @unique @default(autoincrement())
    name String @unique

	deleted Boolean @default(false)
    deleted_at DateTime?

    Games Game[] @relation()
}

model Collectible {
    id            Int     @id @unique @default(autoincrement())
    title         String  @unique
    icon          String?
    description   String?
    amount        Int     @default(1)
    is_standalone Boolean @default(true)

	deleted Boolean @default(false)
    deleted_at DateTime?

    parent_id Int?
    Palent    Collectible?  @relation("CollectibleGroup", fields: [parent_id], references: [id])
    Children  Collectible[] @relation("CollectibleGroup")

    game_id Int
    Game    Game @relation(fields: [game_id], references: [id])
}

model CollectibleType {
	id          Int     @id @unique @default(autoincrement())
	title       String  @unique
	description String?
	image       String?

	deleted    Boolean   @default(false)
	deleted_at DateTime?

	game_id Int
	Game    Game @relation(fields: [game_id], references: [id])

	@@unique([game_id, title])
}

model Achievement {
    id          Int     @id @unique @default(autoincrement())
    title       String  @unique
    icon        String?
    description String?

	deleted Boolean @default(false)
    deleted_at DateTime?

    game_id           Int
	Game Game @relation(fields: [game_id], references: [id])
    AchievementGrades AchievementGradeOnStorefrontOnAchievement[]
}

model Area {
	id          Int     @id @unique @default(autoincrement())
	title       String
	description String?
	image       String?

	parent_id  Int?
	ParentArea Area?  @relation("ParentArea", fields: [parent_id], references: [id])
	ChildAreas Area[] @relation("ParentArea")

	game_id Int?
	Game    Game? @relation(fields: [game_id], references: [id])

	deleted    Boolean   @default(false)
	deleted_at DateTime?

	@@unique([title, game_id])
}

model AchievementGrade {
	id    Int    @id @unique @default(autoincrement())
	label String @unique
    icon  String?

	deleted Boolean @default(false)
    deleted_at DateTime?

    Storefronts                  Storefront[]
    AchievementGradeOnStorefront AchievementGradeOnStorefrontOnAchievement[]
}

model Storefront {
    id               Int     @id @unique @default(autoincrement())
    name             String  @unique
    has_achievements Boolean @default(false)

	deleted Boolean @default(false)
    deleted_at DateTime?

    type_id Int
    Type    StorefrontType @relation(fields: [type_id], references: [id])

    AchievementGrades            AchievementGrade[]
    AchievementGradeOnStorefront AchievementGradeOnStorefrontOnAchievement[]
    Games                        Game[]
}

model StorefrontType {
    id   Int    @id @unique @default(autoincrement())
    name String @unique

	deleted Boolean @default(false)
    deleted_at DateTime?

    StoreFronts Storefront[]
}

model AchievementGradeOnStorefrontOnAchievement {
    id Int @id @unique @default(autoincrement())

    storefront_id Int
    Storefront    Storefront @relation(fields: [storefront_id], references: [id])

    achievement_grade_id Int
    AchievementGrade     AchievementGrade @relation(fields: [achievement_grade_id], references: [id])

    achievement_id Int?
    Achievement    Achievement? @relation(fields: [achievement_id], references: [id])
}
